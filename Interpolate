import sympy as sp
import matplotlib.pyplot as plt
import numpy as np
class Interpolate:
    S, Q, R = [], [], []
    # for finding limits, polynomials
    x = sp.Symbol('x')
    def Lag_Poly(self, L, M):
        # X for storing x coordinates
        # Y for storing f(x)
        self.Q, self.R = L, M
        for i in range(len(L)):
            u, j = 1, 0
            # forming list of polynomials
            # summation of which is Lagrange Polynomial
            while j < len(L):
                if i != j:
                    u *= (self.x-L[j])/(L[i]-L[j])
                j += 1   
            u*= M[i] 
            self.S.append(u)
        # plot Lagrange Polynomial
        self.plot_Poly()      
    
    def plot_Poly(self, var = []):
        a = np.arange(0,max(self.Q)+0.2,0.1)
        pol_sum = 0
        # plot function in the list
        for  i in self.S:
            pol_sum += i
            for j in a:
                var.append(sp.limit(i,self.x,j))
            plt.plot(a, var)             
            var = []       
        # plot Lagrange Polynomial in Black Color
        for j in a:
                var.append(sp.limit(pol_sum,self.x,j))
        plt.plot(a, var,'k')
        # plot node points
        plt.plot(self.Q,self.R,'ro')
        plt.title('INTERPOLATING POLYNOMIAL IS BLACK')
        plt.xlabel('X-AXIS')
        plt.ylabel('Y-AXIS')
        plt.show()

apx = Interpolate()

apx.Lag_Poly([0,1,2,3],[-5,-6,-1,16])
