import numpy.polynomial.polynomial as P
import numpy as np
import matplotlib.pyplot as plt
class Interpolate():

    def solve(self,X,F,method):
        if method=='lagarange':
            x=[1]
            for i in range(len(X)):
                x=P.polymul(x,[-1*X[i],1])
            b=[0]
            for i in range(len(X)):
                a=P.polydiv(x,[-1*X[i],1])
                b=P.polyadd(P.polymul((P.polydiv(a[0],P.polyval(X[i],a[0])))[0],[F[i]]),b)
            return b

        if method=='newton':
            def ff(i,j):
                if i==j:
                    return F[i]
                else:
                    return (ff(i+1,j)-ff(i,j-1))/float(X[j]-X[i])
            sum=[0]
            for i in range(len(X)):
                mul=[1]
                for j in range(i):
                    mul=P.polymul(mul,[-1*X[j],1])
                sum=P.polyadd(sum,P.polymul(mul,ff(0,i)))
            return sum

    def plot(self,X,F):

        X1=np.arange(min(X)-2,max(X)+2,0.1)
        num_plots=len(X)
        colormap = plt.cm.gist_ncar
        plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0.2, 0.9, num_plots)])
        x=[1]
        for i in range(len(X)):
            x=P.polymul(x,[-1*X[i],1])
        b=[0]
        for i in range(len(X)):
            a=P.polydiv(x,[-1*X[i],1])
            b=P.polyadd(P.polymul((P.polydiv(a[0],P.polyval(X[i],a[0])))[0],[F[i]]),b)
            Y=P.polyval(X1,P.polymul((P.polydiv(a[0],P.polyval(X[i],a[0])))[0],[F[i]]))
            plt.plot(X1,Y)

        Y=P.polyval(X1,b)
        interpol_obj=plt.plot(X1,Y,'k',linewidth=2)
        plt.plot(X,F,'ro',markersize=8)
        plt.xlabel('x axis')
        plt.ylabel('y axis')
        plt.title('Interpolate')
        plt.grid(True)
        plt.legend(interpol_obj,['Interpolating Polynomial'],fancybox=True,shadow=True,loc='upper left')
        plt.axis([min(X)-3,max(X)+3,min(F)-1,max(F)+1])
        plt.show()



apx = Interpolate()
for method in ['lagarange','newton'] :
    solution = apx.solve([1,2,3],[0,-1,0],method)
    print solution
apx.plot([0,1,2,3],[-5,-6,-1,16])

